package eshore.cn.it.gate;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

import gate.AnnotationSet;
import gate.Corpus;
import gate.CorpusController;
import gate.Document;
import gate.Factory;
import gate.FeatureMap;
import gate.Gate;
import gate.annotation.AnnotationImpl;
import gate.creole.ANNIEConstants;
import gate.creole.ConditionalSerialAnalyserController;
import gate.creole.ResourceInstantiationException;
import gate.util.GateException;
import gate.util.Out;
import gate.util.persistence.PersistenceManager;

/**
 * class<code>GateStart</code>此类演示了如何利用GATE实现批量信息抽取
 *
 * @author   clebeg
 * @version	 0.0.1
 * @see      java.lang.Class
 * @since    JDK1.8
 * */
public class GateStart {
	
	//定义基于语料库的GATE控制者
	private CorpusController controller;
	//需要注册的plugin名字
	private String pluginName;
	//需要使用的资源类名
	private String resourceClassName;
	
	
	
	public static void controllerExecute() throws Exception {
		setGateHome();
		Gate.init();
		// Load ANNIE plugin
		File gateHome = Gate.getGateHome();
		File pluginsHome = new File(gateHome, "plugins");
		//注册插件
		Gate.getCreoleRegister().registerDirectories(new File(pluginsHome, "Lang_Chinese").toURI().toURL());
		
		Out.prln("...GATE initialised");

		// initialise ANNIE (this may take several minutes)
		initController();

		// create a GATE corpus and add a document for each command-line
		// argument
		Corpus corpus = (Corpus) Factory.createResource("gate.corpora.CorpusImpl");
		// for(int i = 0; i < args.length; i++) {
		// URL u = new URL(args[i]);
//		URL u = new URL("file:/d:\\corpus\\corpusedFile.txt");
		StringBuffer corpusDir = new StringBuffer("");
		corpusDir.append("file:/").append(System.getProperty("user.dir")).append("\\corpusedFile.txt");
		URL u = new URL(corpusDir.toString());
		FeatureMap params = Factory.newFeatureMap();
		params.put("sourceUrl", u);
		params.put("preserveOriginalContent", new Boolean(true));
		params.put("collectRepositioningInfo", new Boolean(true));
		params.put("encoding", "UTF-8");//以UTF-8编码读取信息 否则会出现乱码
		Out.prln("Creating doc for " + u);
		Document docs = (Document) Factory.createResource("gate.corpora.DocumentImpl", params);
		corpus.add(docs);
		// } // for each of args

		// tell the pipeline about the corpus and run it
		controller.setCorpus(corpus);
		controller.execute();
		doSometings(docs);
		//标注完成输出结果
		//@SuppressWarnings("resource")
		//FileWriter writer = new FileWriter(new File("test.xml"));
		//writer.write(docs.toXml());
	}
	
	
	private static void doSometings(Document docs) throws ResourceInstantiationException {
		AnnotationSet annSet = docs.getAnnotations();
		
		String type = "Date";
		
		AnnotationSet persSet = annSet.get(type);
		List persList = new ArrayList(persSet);
		Collections.sort(persList , new gate.util.OffsetComparator());
		Iterator persIter = persList.iterator();
		while(persIter.hasNext()) {
			AnnotationImpl impl = (AnnotationImpl)persIter.next();
			
		}
	}

	public static void setGateHome() {
		System.setProperty("gate.home", "F:\\java\\GATE_Developer_8.0");
		String configFileDir = System.getProperty("user.dir") + "\\gate.xml";
		System.setProperty("gate.user.conﬁg", configFileDir);
		String sessionFileDir = System.getProperty("user.dir") + "\\gate.session";
		System.setProperty("gate.user.session", sessionFileDir);
		System.out.println(System.getProperties().getProperty("gate.home"));
		System.out.println(System.getProperties().getProperty("gate.user.conﬁg"));
		System.out.println(System.getProperties().getProperty("gate.user.session"));
	}
	
	public void initController() throws GateException, IOException {
		Out.prln("Initialising CHNIE...");
		//chnController = (ConditionalSerialAnalyserController) PersistenceManager.loadObjectFromFile(new File(new File(Gate.getPluginsHome(),"Lang_Chinese"), "resources/chinese.gapp"));
		controller = (ConditionalSerialAnalyserController)
				PersistenceManager.loadObjectFromFile(new File(new File(
				Gate.getPluginsHome(), ANNIEConstants.PLUGIN_DIR),
				ANNIEConstants.DEFAULT_FILE));
		Out.prln("...CHNIE loaded");
	} 
}
